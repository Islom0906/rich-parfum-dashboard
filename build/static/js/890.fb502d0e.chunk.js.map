{"version":3,"file":"static/js/890.fb502d0e.chunk.js","mappings":"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","sources":["pages/sample/Index-Category/IndexCategoryPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React, {useEffect} from 'react';\nimport {Button, Col, Form, Input, message, Row} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\n\n\nconst initialValueForm = {\n    name: \"\",\n    date: \"\",\n\n};\n\n\nconst IndexCategoryPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n    // query-IndexCategory\n    const {\n        mutate: postIndexCategoryMutate,\n        data: postIndexCategory,\n        isLoading: postIndexCategoryLoading,\n        isSuccess: postIndexCategorySuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editIndexCategoryLoading,\n        data: editIndexCategoryData,\n        refetch: editIndexCategoryRefetch,\n        isSuccess: editIndexCategorySuccess,\n    } = useQuery([\"edit-index-category\", editId], () => apiService.getDataByID(\"/products/index-category\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putIndexCategory,\n        isLoading: putIndexCategoryLoading,\n        data: putData,\n        isSuccess: putIndexCategorySuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n\n        }\n    });\n\n    // IndexCategory success\n    useEffect(() => {\n        if (putIndexCategorySuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postIndexCategorySuccess || putIndexCategorySuccess) {\n\n            navigate('/index-category')\n        }\n    }, [postIndexCategory, putData])\n\n\n\n\n    // if edit IndexCategory\n    useEffect(() => {\n        if (editId !== \"\") {\n            editIndexCategoryRefetch();\n        }\n    }, [editId]);\n\n    // if no edit IndexCategory\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit IndexCategory\n    useEffect(() => {\n        if (editIndexCategorySuccess) {\n\n\n            const edit = {\n                name: editIndexCategoryData.name,\n                date: editIndexCategoryData.date===null ? \"\" : editIndexCategoryData.date,\n            }\n\n            form.setFieldsValue(edit)\n        }\n\n    }, [editIndexCategoryData])\n\n\n    const onFinish = (values) => {\n\n\n\n\n        if (editIndexCategoryData) {\n            putIndexCategory({url: '/products/index-category', data: values, id: editId})\n        } else {\n            postIndexCategoryMutate({url: \"/products/index-category/\", data: values});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n    return (\n        <div>\n            {(postIndexCategoryLoading || editIndexCategoryLoading || putIndexCategoryLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Name\"\n                                name=\"name\"\n                                rules={[{required: true, message: 'Категория обязательна'}]}\n\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Дата (Не обязательно)\"\n                                name=\"date\"\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n\n                    </Row>\n\n\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editIndexCategorySuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default IndexCategoryPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["initialValueForm","name","date","IndexCategoryPostEdit","form","Form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","mutate","postIndexCategoryMutate","data","postIndexCategory","isLoading","postIndexCategoryLoading","isSuccess","postIndexCategorySuccess","useMutation","_ref","url","apiService","postData","onSuccess","message","success","onError","error","obj","response","concat","editIndexCategoryLoading","editIndexCategoryData","refetch","editIndexCategoryRefetch","editIndexCategorySuccess","useQuery","getDataByID","enabled","putIndexCategory","putIndexCategoryLoading","putData","putIndexCategorySuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_jsx","children","AppLoader","_jsxs","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Item","label","rules","required","Input","Button","htmlType","width","marginTop"],"sourceRoot":""}