{"version":3,"file":"static/js/325.e81511f6.chunk.js","mappings":"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","sources":["pages/sample/Map/MapPostEdit.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, Input, message, Row} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport {GoogleMap, MarkerF, useJsApiLoader} from \"@react-google-maps/api\";\n\nconst initialValueForm = {\n    name_ru: \"\",\n    name_uz: \"\",\n    workingTime: \"\",\n    tel: \"\",\n    lat: \"\"\n};\n\n\nconst MapPostEdit = () => {\n    const {isLoaded} = useJsApiLoader({\n        id: 'google-map-script',\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n        libraries: ['geometry', 'drawing'],\n    });\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [latLng, setlatLng] = useState({lat: null, lng: null});\n    // const [defaultCenter, setDefaultCenter] = useState({\n    //     lat: 41.311785,\n    //     lng: 69.279696,\n    // });\n    // query-map\n    const {\n        mutate: postMapMutate,\n        data: postMap,\n        isLoading: postMapLoading,\n        isSuccess: postMapSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n\n            message.error(error)\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editMapLoading,\n        data: editMapData,\n        refetch: editMapRefetch,\n        isSuccess: editMapSuccess,\n    } = useQuery([\"edit-map\", editId], () => apiService.getDataByID(\"/about/map\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putMap,\n        isLoading: putMapLoading,\n        data: putData,\n        isSuccess: putMapSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            message.error(error.message)\n        }\n    });\n\n    // map success\n    useEffect(() => {\n        if (putMapSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postMapSuccess || putMapSuccess) {\n\n            navigate('/map')\n        }\n    }, [postMap, putData])\n\n\n    // if edit map\n    useEffect(() => {\n        if (editId !== \"\") {\n            editMapRefetch();\n        }\n    }, [editId]);\n\n    // if no edit map\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n            setlatLng({\n                lat: 41.311785,\n                lng: 69.279696,\n            })\n        }\n    }, []);\n\n\n    //edit map\n    useEffect(() => {\n        if (editMapSuccess) {\n\n            const edit = {\n                name_ru: editMapData.name_ru,\n                name_uz: editMapData.name_uz,\n                phone: editMapData.phone,\n                lat: editMapData.lat\n            }\n\n            // setDefaultCenter({lat: Number(editMapData.lat), lng: Number(editMapData.lng)})\n            setlatLng({lat: Number(editMapData.lat), lng: Number(editMapData.lng)})\n            form.setFieldsValue(edit)\n        }\n\n    }, [editMapData])\n\n\n    const onFinish = (values) => {\n\n        const data = {...values, lat: latLng.lat, lng: latLng.lng}\n\n\n        if (editMapData) {\n            putMap({url: '/about/map', data, id: editId})\n        } else {\n            postMapMutate({url: \"/about/map/\", data});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // Map\n    const handleMapClick = (event) => {\n        const clickedLatLng = {\n            lat: event.latLng.lat(),\n            lng: event?.latLng.lng(),\n        };\n        // setDefaultCenter(clickedLatLng)\n        setlatLng(clickedLatLng)\n        form.setFieldsValue({lat: clickedLatLng.lat})\n    };\n    const mapStyles = {\n        height: '400px',\n        width: '100%',\n    };\n\n\n    return (\n        <div>\n            {(postMapLoading || editMapLoading || putMapLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Название филиала Ru\"\n                                name=\"name_ru\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: \"Ввод названия филиала обязателен Ru!\"\n                                    }\n                                ]}\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Filial nomi Uz\"\n                                name=\"name_uz\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: \"Filial nomini kiritish majburiy Uz!\"\n                                    }\n                                ]}\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n\n                    </Row>\n\n\n                    <Row gutter={20}>\n\n                        <Col span={24}>\n                            <Form.Item\n                                label=\"Номер телефона\"\n                                name=\"phone\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: \"Требуется номер телефона!\"\n                                    }\n                                ]}\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n                    <Row gutter={20}>\n                        <Col span={24}>\n                            {\n                                isLoaded &&\n\n                                <GoogleMap\n                                    mapContainerStyle={mapStyles}\n                                    zoom={12}\n                                    center={latLng}\n                                    onClick={handleMapClick}\n                                >\n                                    <MarkerF position={latLng}/>\n                                </GoogleMap>\n                            }\n                            <Form.Item\n                                label=\"\"\n                                name=\"lat\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: \"Разметка карты обязательна\"\n                                    }\n                                ]}\n                            >\n\n\n                            </Form.Item>\n\n\n                        </Col>\n\n                    </Row>\n\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editMapSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default MapPostEdit;"],"names":["initialValueForm","name_ru","name_uz","workingTime","tel","lat","MapPostEdit","isLoaded","useJsApiLoader","id","googleMapsApiKey","process","libraries","form","Form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","latLng","setlatLng","useState","lng","mutate","postMapMutate","data","postMap","isLoading","postMapLoading","isSuccess","postMapSuccess","useMutation","_ref","url","apiService","postData","onSuccess","message","success","onError","error","editMapLoading","editMapData","refetch","editMapRefetch","editMapSuccess","useQuery","getDataByID","enabled","putMap","putMapLoading","putData","putMapSuccess","_ref2","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","phone","Number","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_jsx","children","AppLoader","_jsxs","name","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Item","label","rules","required","Input","GoogleMap","mapContainerStyle","height","width","zoom","center","onClick","event","clickedLatLng","MarkerF","position","Button","htmlType","marginTop"],"sourceRoot":""}