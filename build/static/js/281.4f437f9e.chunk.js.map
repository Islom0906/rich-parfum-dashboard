{"version":3,"file":"static/js/281.4f437f9e.chunk.js","mappings":"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","sources":["pages/sample/Dashboard/dealersChart.jsx","pages/sample/Dashboard/testDriveChart.jsx","pages/sample/Dashboard/OrderChart.jsx","pages/sample/Dashboard/index.jsx"],"sourcesContent":["import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend ,ResponsiveContainer} from 'recharts';\nimport { useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {message,Typography } from 'antd';\nimport { useMemo } from 'react';\nconst { Title } = Typography;\n\n\n\nconst DealersChart = () => {\n  const {data,isError,isLoading} = useQuery(\n    'dealers-get',\n    () => apiService.getData('/dealers'),\n    {\n      onError: (error) => {\n\n        message.error(error);\n      },\n    },\n  );\n    const dataOrder = useMemo(() => {\n        if (isLoading || isError) {\n            return []; // Return an empty array or handle error state\n        }\n\n        const dataMap = new Map();\n\n        data?.forEach((entry) => {\n            const createdAtDate = new Date(entry?.createdAt).toLocaleDateString();\n\n            if (dataMap?.has(createdAtDate)) {\n                dataMap?.set(createdAtDate, dataMap.get(createdAtDate) + 1);\n            } else {\n                dataMap?.set(createdAtDate, 1);\n            }\n        });\n\n        const result = [];\n\n        for (const [date, count] of dataMap) {\n            result.push({ date, count });\n        }\n\n        return result;\n    }, [data, isLoading, isError]);\n\n  return (\n    <div>\n      <Title type='h2'>Статистика заявок дилера</Title>\n      <ResponsiveContainer width=\"100%\" height={300}>\n       <BarChart  data={dataOrder}>\n                <CartesianGrid strokeDasharray=\"3 6\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"count\" fill=\"#8884d8\" />\n            </BarChart>\n            </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport default DealersChart","import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend ,ResponsiveContainer} from 'recharts';\nimport { useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {message,Typography } from 'antd';\nimport { useMemo } from 'react';\nconst { Title } = Typography;\n\n\n\nconst OrderChart = () => {\n    const {data,isError,isLoading} = useQuery(\n        'testDrive-get',\n        () => apiService.getData('/testDrive'),\n        {\n            onError: (error) => {\n\n                message.error(error);\n            },\n        },\n    );\n    const dataOrder = useMemo(() => {\n        if (isLoading || isError) {\n            return []; // Return an empty array or handle error state\n        }\n\n        const dataMap = new Map();\n\n        data?.forEach((entry) => {\n            const createdAtDate = new Date(entry?.createdAt).toLocaleDateString();\n\n            if (dataMap?.has(createdAtDate)) {\n                dataMap?.set(createdAtDate, dataMap.get(createdAtDate) + 1);\n            } else {\n                dataMap?.set(createdAtDate, 1);\n            }\n        });\n\n        const result = [];\n\n        for (const [date, count] of dataMap) {\n            result.push({ date, count });\n        }\n\n        return result;\n    }, [data, isLoading, isError]);\n\n    return (\n        <div>\n            <Title type='h2'>Статистика заявок тест-драйва</Title>\n            <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart  data={dataOrder}>\n                    <CartesianGrid strokeDasharray=\"3 6\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"count\" fill=\"#82ca9d\" />\n                </BarChart>\n            </ResponsiveContainer>\n        </div>\n    )\n}\n\nexport default OrderChart","import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend ,ResponsiveContainer} from 'recharts';\nimport { useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {message,Typography } from 'antd';\nimport { useMemo } from 'react';\nconst { Title } = Typography;\n\n\n\nconst DealersChart = () => {\n  const {data,isError,isLoading} = useQuery(\n      'order-get',\n      () => apiService.getData('/order'),\n      {\n        onError: (error) => {\n\n          message.error(error);\n        },\n      },\n  );\n  const dataOrder = useMemo(() => {\n    if (isLoading || isError) {\n      return []; // Return an empty array or handle error state\n    }\n\n    const dataMap = new Map();\n\n    data?.forEach((entry) => {\n      const createdAtDate = new Date(entry?.createdAt).toLocaleDateString();\n\n      if (dataMap?.has(createdAtDate)) {\n        dataMap?.set(createdAtDate, dataMap.get(createdAtDate) + 1);\n      } else {\n        dataMap?.set(createdAtDate, 1);\n      }\n    });\n\n    const result = [];\n\n    for (const [date, count] of dataMap) {\n      result.push({ date, count });\n    }\n\n    return result;\n  }, [data, isLoading, isError]);\n\n  return (\n      <div>\n        <Title type='h2'>Статистика заказов автомобилей</Title>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart  data={dataOrder}>\n            <CartesianGrid strokeDasharray=\"3 6\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"count\" fill=\"#8884d8\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n  )\n}\n\nexport default DealersChart","import React from 'react';\nimport DealersChart from './dealersChart';\nimport TestDriveChart from './testDriveChart';\nimport OrderChart from './OrderChart';\n\n\n\n\n\nconst Dashboard = () => {\n    return (\n        <div>\n           <DealersChart/>\n           <TestDriveChart/>\n            <OrderChart/>\n        </div>\n    );\n};\n\nexport default Dashboard;"],"names":["Title","Typography","DealersChart","data","isError","isLoading","useQuery","apiService","getData","onError","error","message","dataOrder","useMemo","dataMap","Map","forEach","entry","createdAtDate","Date","createdAt","toLocaleDateString","has","set","get","result","date","count","push","_jsxs","children","_jsx","type","ResponsiveContainer","width","height","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","OrderChart","Dashboard","TestDriveChart"],"sourceRoot":""}