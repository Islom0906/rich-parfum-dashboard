{"version":3,"file":"static/js/259.4020a880.chunk.js","mappings":"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","sources":["pages/sample/Smell/SmellPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React, {useEffect} from 'react';\nimport {Button, Col, Form, Input, message, Row} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\n\n\nconst initialValueForm = {\n    name: \"\",\n    date: \"\",\n\n};\n\n\nconst SmellPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n    // query-smell\n    const {\n        mutate: postSmellMutate,\n        data: postSmell,\n        isLoading: postSmellLoading,\n        isSuccess: postSmellSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editSmellLoading,\n        data: editSmellData,\n        refetch: editSmellRefetch,\n        isSuccess: editSmellSuccess,\n    } = useQuery([\"smell-category\", editId], () => apiService.getDataByID(\"/products/smell\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putSmell,\n        isLoading: putSmellLoading,\n        data: putData,\n        isSuccess: putSmellSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n\n        }\n    });\n\n    // smell success\n    useEffect(() => {\n        if (putSmellSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postSmellSuccess || putSmellSuccess) {\n\n            navigate('/smell')\n        }\n    }, [postSmell, putData])\n\n\n\n\n    // if edit smell\n    useEffect(() => {\n        if (editId !== \"\") {\n            editSmellRefetch();\n        }\n    }, [editId]);\n\n    // if no edit smell\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit smell\n    useEffect(() => {\n        if (editSmellSuccess) {\n\n\n            const edit = {\n                name_uz: editSmellData.name_uz,\n                name_ru: editSmellData.name_ru,\n            }\n\n            form.setFieldsValue(edit)\n        }\n\n    }, [editSmellData])\n\n\n    const onFinish = (values) => {\n\n\n\n\n        if (editSmellData) {\n            putSmell({url: '/products/smell', data: values, id: editId})\n        } else {\n            postSmellMutate({url: \"/products/smell/\", data: values});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n    return (\n        <div>\n            {(postSmellLoading || editSmellLoading || putSmellLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Name uz\"\n                                name=\"name_uz\"\n                                rules={[{required: true, message: 'Hidni nomini talab qilish'}]}\n\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Name Ru\"\n                                name=\"name_ru\"\n                                rules={[{required: true, message: 'Требуйте название запаха'}]}\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n\n                    </Row>\n\n\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editSmellSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default SmellPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["initialValueForm","name","date","SmellPostEdit","form","Form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","mutate","postSmellMutate","data","postSmell","isLoading","postSmellLoading","isSuccess","postSmellSuccess","useMutation","_ref","url","apiService","postData","onSuccess","message","success","onError","error","obj","response","concat","editSmellLoading","editSmellData","refetch","editSmellRefetch","editSmellSuccess","useQuery","getDataByID","enabled","putSmell","putSmellLoading","putData","putSmellSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","name_uz","name_ru","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_jsx","children","AppLoader","_jsxs","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Item","label","rules","required","Input","Button","htmlType","width","marginTop"],"sourceRoot":""}