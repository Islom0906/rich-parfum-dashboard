{"version":3,"file":"static/js/570.345503e1.chunk.js","mappings":"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","sources":["pages/sample/Partner/PartnerPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, Input, message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport ImgCrop from \"antd-img-crop\";\n\n\nconst initialValueForm = {\n    full_name_uz: \"\",\n    full_name_ru: \"\",\n    job_uz: \"\",\n    job_ru: \"\",\n    text_uz: \"\",\n    text_ru: \"\",\n    image: \"\",\n    facebook: \"\",\n    instagram: \"\",\n    telegram: \"\",\n    youtube: \"\",\n\n};\n\n\nconst PartnerPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n\n    // query-partner\n    const {\n        mutate: postPartnerMutate,\n        data: postPartner,\n        isLoading: postPartnerLoading,\n        isSuccess: postPartnerSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editPartnerLoading,\n        data: editPartnerData,\n        refetch: editPartnerRefetch,\n        isSuccess: editPartnerSuccess,\n    } = useQuery([\"edit-partner\", editId], () => apiService.getDataByID(\"/about/partner\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putPartner,\n        isLoading: putPartnerLoading,\n        data: putData,\n        isSuccess: putPartnerSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n\n        }\n    });\n\n    // partner success\n    useEffect(() => {\n        if (putPartnerSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postPartnerSuccess || putPartnerSuccess) {\n\n            navigate('/partner')\n        }\n    }, [postPartner, putData])\n\n\n\n\n    // if edit partner\n    useEffect(() => {\n        if (editId !== \"\") {\n            editPartnerRefetch();\n        }\n    }, [editId]);\n\n    // if no edit partner\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit partner\n    useEffect(() => {\n        if (editPartnerSuccess) {\n\n            const imageInitial = [\n                {\n                    uid: editPartnerData?.id,\n                    name: editPartnerData?.id,\n                    status: 'done',\n                    url: editPartnerData?.image,\n                },\n            ]\n            const edit = {\n                full_name_uz: editPartnerData.full_name_uz,\n                full_name_ru: editPartnerData.full_name_ru,\n                job_uz: editPartnerData.job_uz,\n                job_ru: editPartnerData.job_ru,\n                text_uz: editPartnerData.text_uz,\n                text_ru: editPartnerData.text_ru,\n                image: editPartnerData.image,\n                facebook: '',\n                instagram: '',\n                telegram: '',\n                youtube: ''\n            }\n\n            setFileListProps(imageInitial)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editPartnerData])\n\n\n    const onFinish = (values) => {\n\n        const formData = new FormData();\n\n        formData.append('full_name_uz', values.full_name_uz);\n        formData.append('full_name_ru', values.full_name_ru);\n        formData.append('job_uz', '');\n        formData.append('job_ru', '');\n        formData.append('text_uz', values.text_uz);\n        formData.append('text_ru', values.text_ru);\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n        formData.append('facebook', '');\n        formData.append('telegram', '');\n        formData.append('instagram', '');\n        formData.append('youtube', '');\n\n\n        if (editPartnerData) {\n            putPartner({url: '/about/partner', data: formData, id: editId})\n        } else {\n            postPartnerMutate({url: \"/about/partner/\", data: formData});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // image\n    const onChange = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n    };\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n    return (\n        <div>\n            {(postPartnerLoading || editPartnerLoading || putPartnerLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Full Name Uz\"\n                                name=\"full_name_uz\"\n                                rules={[{required: true, message: 'F.I.O ni kiritish talab qilinadi'}]}\n\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Полное имя Ru\"\n                                name=\"full_name_ru\"\n                                rules={[{required: true, message: 'Требуется Полное имя'}]}\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n\n                    </Row>\n                    {/*<Row gutter={20}>*/}\n                    {/*    <Col span={12}>*/}\n                    {/*        <Form.Item*/}\n                    {/*            label=\"Kasb\"*/}\n                    {/*            name=\"job_uz\"*/}\n                    {/*            rules={[{required: true, message: 'Kasb talab qilinadi'}]}*/}\n\n                    {/*        >*/}\n                    {/*            <Input/>*/}\n                    {/*        </Form.Item>*/}\n\n                    {/*    </Col>*/}\n                    {/*    <Col span={12}>*/}\n                    {/*        <Form.Item*/}\n                    {/*            label=\"Работа\"*/}\n                    {/*            name=\"job_ru\"*/}\n                    {/*            rules={[{required: true, message: 'Требуется Работа'}]}*/}\n                    {/*        >*/}\n                    {/*            <Input/>*/}\n                    {/*        </Form.Item>*/}\n\n                    {/*    </Col>*/}\n\n                    {/*</Row>*/}\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Fikr-mulohaza\"\n                                name=\"text_uz\"\n                                rules={[{required: true, message: 'Требуется Fikr-mulohaza'}]}\n\n                            >\n                                <TextArea rows={4}/>\n                            </Form.Item>\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Обратная связь\"\n                                name=\"text_ru\"\n                                rules={[{required: true, message: 'Требуется Обратная связь'}]}\n                            >\n                                <TextArea rows={4}/>\n                            </Form.Item>\n\n                        </Col>\n\n                    </Row>\n                    <Row gutter={20}>\n                        <Form.Item\n                            label='Изображение Пользователь'\n                            name={'image'}\n                            rules={[{required: true, message: 'Требуется загрузка изображения Пользователь'}]}>\n                            <ImgCrop rotationSlider>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChange}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Row>\n                    {/*<Title level={4}>Социальные сети пользователя</Title>*/}\n                    {/*<Row gutter={20}>*/}\n                    {/*    <Col span={12}>*/}\n                    {/*        <Form.Item*/}\n                    {/*            label=\"Facebook\"*/}\n                    {/*            name=\"facebook\"*/}\n                    {/*            rules={[{required: true, message: 'Требуется Facebook'}]}*/}\n\n                    {/*        >*/}\n                    {/*            <Input addonBefore={'https://'}/>*/}\n                    {/*        </Form.Item>*/}\n\n                    {/*    </Col>*/}\n                    {/*    <Col span={12}>*/}\n                    {/*        <Form.Item*/}\n                    {/*            label=\"Instagram\"*/}\n                    {/*            name=\"instagram\"*/}\n                    {/*            rules={[{required: true, message: 'Требуется Instagram'}]}*/}\n                    {/*        >*/}\n                    {/*            <Input addonBefore={'https://'}/>*/}\n                    {/*        </Form.Item>*/}\n\n                    {/*    </Col>*/}\n\n                    {/*</Row>*/}\n                    {/*<Row gutter={20}>*/}\n                    {/*    <Col span={12}>*/}\n                    {/*        <Form.Item*/}\n                    {/*            label=\"Telegram\"*/}\n                    {/*            name=\"telegram\"*/}\n                    {/*            rules={[{required: true, message: 'Требуется Telegram'}]}*/}\n                    {/*        >*/}\n                    {/*            <Input addonBefore={'https://'}/>*/}\n                    {/*        </Form.Item>*/}\n\n                    {/*    </Col>*/}\n                    {/*    <Col span={12}>*/}\n                    {/*        <Form.Item*/}\n                    {/*            label=\"Youtube\"*/}\n                    {/*            name=\"youtube\"*/}\n                    {/*            rules={[{required: true, message: 'Требуется Youtube'}]}*/}\n\n                    {/*        >*/}\n                    {/*            <Input addonBefore={'https://'}/>*/}\n                    {/*        </Form.Item>*/}\n\n                    {/*    </Col>*/}\n\n                    {/*</Row>*/}\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editPartnerSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default PartnerPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["initialValueForm","full_name_uz","full_name_ru","job_uz","job_ru","text_uz","text_ru","image","facebook","instagram","telegram","youtube","PartnerPostEdit","form","Form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postPartnerMutate","data","postPartner","isLoading","postPartnerLoading","isSuccess","postPartnerSuccess","useMutation","_ref","url","apiService","postData","onSuccess","message","success","onError","error","obj","response","concat","editPartnerLoading","editPartnerData","refetch","editPartnerRefetch","editPartnerSuccess","useQuery","getDataByID","enabled","putPartner","putPartnerLoading","putData","putPartnerSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","imageInitial","uid","name","status","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_jsx","children","AppLoader","_jsxs","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Item","label","rules","required","Input","TextArea","rows","ImgCrop","rotationSlider","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}