{"version":3,"file":"static/js/846.cbb13f65.chunk.js","mappings":"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","sources":["pages/sample/Banner-Second/BannerSecondPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React, {useEffect, useMemo, useState} from 'react';\nimport {Button, Col, Form,  message, Row, Upload, Select} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport ImgCrop from \"antd-img-crop\";\n\n\nconst initialValueForm = {\n    image_uz: \"\",\n    image_ru: \"\",\n    discount: \"\",\n    smell: \"\",\n\n\n};\n\n\nconst BannerSecondPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListPropsUz, setFileListPropsUz] = useState([]);\n    const [fileListPropsRu, setFileListPropsRu] = useState([]);\n\n\n    // query-second-banner\n    const {\n        mutate: postBannerSecondMutate,\n        data: postBannerSecond,\n        isLoading: postBannerSecondLoading,\n        isSuccess: postBannerSecondSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-smell\n    const {data: smellData, refetch: smellFetch} = useQuery(\n        'get-brand',\n        () => apiService.getData('/products/smell/'),\n        {\n            enabled: false,\n        },\n    );\n\n\n    // query-edit\n    const {\n        isLoading: editBannerSecondLoading,\n        data: editBannerSecondData,\n        refetch: editBannerSecondRefetch,\n        isSuccess: editBannerSecondSuccess,\n    } = useQuery([\"edit-second-banner\", editId], () => apiService.getDataByID(\"/about/header-banner-second\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putBannerSecond,\n        isLoading: putBannerSecondLoading,\n        data: putData,\n        isSuccess: putBannerSecondSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n\n        }\n    });\n\n    // banner success\n    useEffect(() => {\n        if (putBannerSecondSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postBannerSecondSuccess || putBannerSecondSuccess) {\n\n            navigate('/banner-second')\n        }\n    }, [postBannerSecond, putData])\n\n\n    // if edit banner\n    useEffect(() => {\n        if (editId !== \"\") {\n            editBannerSecondRefetch();\n        }\n    }, [editId]);\n\n    // if no edit banner\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n        smellFetch()\n    }, []);\n\n\n    //edit banner\n    useEffect(() => {\n        if (editBannerSecondSuccess) {\n\n            const imageInitialUz = [\n                {\n                    uid: editBannerSecondData?.id,\n                    name: editBannerSecondData?.id,\n                    status: 'done',\n                    url: editBannerSecondData?.image_uz,\n                },\n            ]\n            const imageInitialRu = [\n                {\n                    uid: editBannerSecondData?.id,\n                    name: editBannerSecondData?.id,\n                    status: 'done',\n                    url: editBannerSecondData?.image_ru,\n                },\n            ]\n            const edit = {\n                discount: editBannerSecondData.discount,\n                smell: editBannerSecondData.smell,\n                image_uz: editBannerSecondData.image_uz,\n                image_ru: editBannerSecondData.image_ru,\n            }\n\n            setFileListPropsUz(imageInitialUz)\n            setFileListPropsRu(imageInitialRu)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editBannerSecondData])\n\n\n    const onFinish = (values) => {\n\n        const formData = new FormData();\n\n        formData.append('discount', values.discount);\n        formData.append('smell', values.smell);\n\n        if (fileListPropsUz[0]?.originFileObj) {\n            formData.append('image_uz', fileListPropsUz[0]?.originFileObj);\n        }\n        if (fileListPropsRu[0]?.originFileObj) {\n            formData.append('image_ru', fileListPropsRu[0]?.originFileObj);\n        }\n\n\n\n        if (editBannerSecondData) {\n            putBannerSecond({url: '/about/header-banner-second', data: formData, id: editId})\n        } else {\n            postBannerSecondMutate({url: \"/about/header-banner-second/\", data: formData});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // image\n    const onChangeUz = ({fileList: newFileList}) => {\n        setFileListPropsUz(newFileList);\n        form.setFieldsValue({image_uz: newFileList});\n    };\n    const onChangeRu = ({fileList: newFileList}) => {\n        setFileListPropsRu(newFileList);\n        form.setFieldsValue({image_ru: newFileList});\n    };\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n    const optionsDiscount = useMemo(() => {\n        return [\n            {\n                value: 'Все',\n                label: 'Все',\n            },\n        ]\n    }, []);\n\n    const optionsSmell = useMemo(() => {\n        return smellData?.map((option) => {\n            return {\n                value: option?.name_ru,\n                label: option?.name_ru,\n            };\n        });\n    }, [smellData]);\n\n    return (\n        <div>\n            {(postBannerSecondLoading || editBannerSecondLoading || putBannerSecondLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label={'Выберите Скидка'}\n                                name={'discount'}\n                                wrapperCol={{\n                                    span: 24,\n                                }}\n                                >\n                                <Select\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                    placeholder='Выберите одну Скидка'\n                                    optionLabelProp='label'\n                                    options={optionsDiscount}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label={'Выберите Запах'}\n                                name={'smell'}\n                                wrapperCol={{\n                                    span: 24,\n                                }}\n                               >\n                                <Select\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                    placeholder='Выберите одну Запах'\n                                    optionLabelProp='label'\n                                    options={optionsSmell}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label='Изображение Ru'\n                                name={'image_ru'}\n                                rules={[{required: true, message: 'Требуется загрузка изображения Ru'}]}>\n                                <ImgCrop rotationSlider>\n                                    <Upload\n                                        maxCount={1}\n                                        fileList={fileListPropsRu}\n                                        listType='picture-card'\n                                        onChange={onChangeRu}\n                                        onPreview={onPreview}\n                                        beforeUpload={() => false}\n                                    >\n                                        {fileListPropsRu.length > 0 ? \"\" : \"Upload\"}\n                                    </Upload>\n                                </ImgCrop>\n                            </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label='Banner rasm Uz'\n                                name={'image_uz'}\n                                rules={[{required: true, message: 'Banner Rasm talab qilinadi'}]}>\n                                <ImgCrop rotationSlider>\n                                    <Upload\n                                        maxCount={1}\n                                        fileList={fileListPropsUz}\n                                        listType='picture-card'\n                                        onChange={onChangeUz}\n                                        onPreview={onPreview}\n                                        beforeUpload={() => false}\n                                    >\n                                        {fileListPropsUz.length > 0 ? \"\" : \"Upload\"}\n                                    </Upload>\n                                </ImgCrop>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editBannerSecondSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default BannerSecondPostEdit;\n\n","import { Col } from '../grid';\nexport default Col;"],"names":["initialValueForm","image_uz","image_ru","discount","smell","BannerSecondPostEdit","form","Form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListPropsUz","setFileListPropsUz","useState","fileListPropsRu","setFileListPropsRu","mutate","postBannerSecondMutate","data","postBannerSecond","isLoading","postBannerSecondLoading","isSuccess","postBannerSecondSuccess","useMutation","_ref","url","apiService","postData","onSuccess","message","success","onError","error","obj","response","concat","smellData","refetch","smellFetch","useQuery","getData","enabled","editBannerSecondLoading","editBannerSecondData","editBannerSecondRefetch","editBannerSecondSuccess","getDataByID","putBannerSecond","putBannerSecondLoading","putData","putBannerSecondSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","imageInitialUz","uid","name","status","imageInitialRu","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","image","Image","imgWindow","open","document","write","outerHTML","optionsDiscount","useMemo","value","label","optionsSmell","map","option","name_ru","_jsx","children","AppLoader","_jsxs","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListPropsUz$","_fileListPropsRu$","formData","FormData","_fileListPropsUz$2","_fileListPropsRu$2","append","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Item","Select","width","placeholder","optionLabelProp","options","rules","required","ImgCrop","rotationSlider","Upload","maxCount","fileList","listType","onChange","_ref4","newFileList","beforeUpload","length","_ref3","Button","htmlType","marginTop"],"sourceRoot":""}