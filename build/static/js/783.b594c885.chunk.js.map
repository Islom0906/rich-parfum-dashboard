{"version":3,"file":"static/js/783.b594c885.chunk.js","mappings":"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","sources":["pages/sample/Brand/BrandPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, Input, message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport ImgCrop from \"antd-img-crop\";\n\n\nconst initialValueForm = {\n    name_uz: \"\",\n    name_ru: \"\",\n    image: \"\",\n\n};\n\n\nconst BrandPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n    // query-brand\n    const {\n        mutate: postBrandMutate,\n        data: postBrand,\n        isLoading: postBrandLoading,\n        isSuccess: postBrandSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editBrandLoading,\n        data: editBrandData,\n        refetch: editBrandRefetch,\n        isSuccess: editBrandSuccess,\n    } = useQuery([\"edit-brand\", editId], () => apiService.getDataByID(\"/products/brand\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putBrand,\n        isLoading: putBrandLoading,\n        data: putData,\n        isSuccess: putBrandSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n\n        }\n    });\n\n    // brand success\n    useEffect(() => {\n        if (putBrandSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postBrandSuccess || putBrandSuccess) {\n\n            navigate('/brand')\n        }\n    }, [postBrand, putData])\n\n\n\n\n    // if edit brand\n    useEffect(() => {\n        if (editId !== \"\") {\n            editBrandRefetch();\n        }\n    }, [editId]);\n\n    // if no edit brand\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit brand\n    useEffect(() => {\n        if (editBrandSuccess) {\n\n            const imageInitial = [\n                {\n                    uid: editBrandData?.id,\n                    name: editBrandData?.id,\n                    status: 'done',\n                    url: editBrandData?.image,\n                },\n            ]\n            const edit = {\n                name_uz: editBrandData.name_uz,\n                name_ru: editBrandData.name_ru,\n                image: editBrandData.image,\n            }\n\n            setFileListProps(imageInitial)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editBrandData])\n\n\n    const onFinish = (values) => {\n\n        const formData = new FormData();\n\n        formData.append('name_uz', values.name_uz);\n        formData.append('name_ru', values.name_ru);\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n        if (editBrandData) {\n            putBrand({url: '/products/brand', data: formData, id: editId})\n        } else {\n            postBrandMutate({url: \"/products/brand/\", data: formData});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // image\n    const onChange = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n    };\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n    return (\n        <div>\n            {(postBrandLoading || editBrandLoading || putBrandLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Name Uz\"\n                                name=\"name_uz\"\n                                rules={[{required: true, message: 'Brand nomi kiritish talab qilinadi'}]}\n\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Имя Ru\"\n                                name=\"name_ru\"\n                                rules={[{required: true, message: 'Требуется Имя бренда'}]}\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n\n                    </Row>\n\n                    <Row gutter={20}>\n                        <Form.Item\n                            label='Изображение бренда'\n                            name={'image'}\n                            rules={[{required: true, message: 'Требуется загрузка Изображение бренда'}]}>\n                            <ImgCrop rotationSlider>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChange}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editBrandSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default BrandPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["initialValueForm","name_uz","name_ru","image","BrandPostEdit","form","Form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postBrandMutate","data","postBrand","isLoading","postBrandLoading","isSuccess","postBrandSuccess","useMutation","_ref","url","apiService","postData","onSuccess","message","success","onError","error","obj","response","concat","editBrandLoading","editBrandData","refetch","editBrandRefetch","editBrandSuccess","useQuery","getDataByID","enabled","putBrand","putBrandLoading","putData","putBrandSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","imageInitial","uid","name","status","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_jsx","children","AppLoader","_jsxs","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Item","label","rules","required","Input","ImgCrop","rotationSlider","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}