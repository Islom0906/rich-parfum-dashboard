{"version":3,"file":"static/js/51.f302ff1f.chunk.js","mappings":"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","sources":["pages/sample/Social-media/SocialPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React, {useEffect} from 'react';\nimport {Button, Col, Form, Input, message, Row} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\n\nconst initialValueForm = {\n    facebook:\"\",\n    instagram:\"\",\n    telegram:\"\",\n    youtube:\"\",\n\n};\n\n\n\nconst SocialPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId}=useSelector(state => state.editData)\n    const dispatch=useDispatch()\n\n\n\n\n    // query-social\n    const {\n        mutate: postSocialMutate,\n        data: postSocial,\n        isLoading: postSocialLoading,\n        isSuccess: postSocialSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data),{\n        onSuccess:()=>{\n\n            message.success('Success')\n        },\n        onError:(error)=>{\n\n            for (let obj in error.response.data){\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editSocialLoading,\n        data: editSocialData,\n        refetch: editSocialRefetch,\n        isSuccess: editSocialSuccess,\n    } = useQuery([\"edit-social\", editId], () => apiService.getDataByID(\"/about/social-media\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putSocial,\n        isLoading: putSocialLoading,\n        data: putData,\n        isSuccess: putSocialSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id),{\n        onSuccess:()=>{\n            message.success('Success')\n        },\n        onError:(error)=>{\n\n            for (let obj in error.response.data){\n            message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n\n        }\n    });\n\n    // social success\n    useEffect(() => {\n        if (putSocialSuccess) {\n            dispatch({type:EDIT_DATA,payload:\"\"})\n        }\n\n        if (postSocialSuccess || putSocialSuccess) {\n\n            navigate('/social')\n        }\n    }, [postSocial,putData])\n\n\n\n\n\n    // if edit social\n    useEffect(() => {\n        if (editId !== \"\") {\n            editSocialRefetch();\n        }\n    }, [editId]);\n\n    // if no edit social\n    useEffect(() => {\n        if (editId===\"\"){\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n\n\n    //edit social\n    useEffect(()=>{\n        if (editSocialSuccess){\n\n        const edit={\n            facebook:editSocialData.facebook.split('//')[1],\n            instagram:editSocialData.instagram.split('//')[1],\n            telegram:editSocialData.telegram.split('//')[1],\n            youtube:editSocialData.youtube.split('//')[1]\n        }\n            form.setFieldsValue(edit)\n        }\n\n    },[editSocialData])\n\n\n\n    const onFinish = (values) => {\n\n\n\n        const data={\n            facebook:`https://${values.facebook}`,\n            telegram:`https://${values.telegram}`,\n            instagram:`https://${values.instagram}`,\n            youtube:`https://${values.youtube}`,\n        }\n\n\n\n        if (editSocialData){\n            putSocial({url: '/about/social-media',data,id:editId})\n        }else{\n            postSocialMutate({url: \"/about/social-media/\", data});\n        }\n\n\n\n\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n  useEffect(() => {\n    const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n    if (storedValues) {\n        storedValues.images=[]\n      form.setFieldsValue(storedValues);\n    }\n\n    const handleBeforeUnload = () => {\n        \n            localStorage.setItem(\n              'myFormValues',\n              JSON.stringify(form.getFieldsValue()),\n            );\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return ()=>{\n        localStorage.removeItem('editDataId')\n        localStorage.removeItem('myFormValues')\n        window.removeEventListener('beforeunload', handleBeforeUnload);\n    }\n  }, []);\n\n\n\n\n\n\n    return (\n        <div>\n            {( postSocialLoading ||editSocialLoading ||putSocialLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Facebook\"\n                                name=\"facebook\"\n                                rules={[{required: true, message: 'Требуется Facebook'}]}\n\n                            >\n                                <Input addonBefore={'https://'}/>\n                            </Form.Item>\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Instagram\"\n                                name=\"instagram\"\n                                rules={[{required: true, message: 'Требуется Instagram'}]}\n                            >\n                                <Input addonBefore={'https://'}/>\n                            </Form.Item>\n\n                        </Col>\n\n                    </Row>\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Telegram\"\n                                name=\"telegram\"\n                                rules={[{required: true, message: 'Требуется Telegram'}]}\n                            >\n                                <Input addonBefore={'https://'}/>\n                            </Form.Item>\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Youtube\"\n                                name=\"youtube\"\n                                rules={[{required: true, message: 'Требуется Youtube'}]}\n\n                            >\n                                <Input addonBefore={'https://'}/>\n                            </Form.Item>\n\n                        </Col>\n\n                    </Row>\n                        <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\",marginTop:\"20px\"}}>\n                    {\n                            editSocialSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default SocialPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["initialValueForm","facebook","instagram","telegram","youtube","SocialPostEdit","form","Form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","mutate","postSocialMutate","data","postSocial","isLoading","postSocialLoading","isSuccess","postSocialSuccess","useMutation","_ref","url","apiService","postData","onSuccess","message","success","onError","error","obj","response","concat","editSocialLoading","editSocialData","refetch","editSocialRefetch","editSocialSuccess","useQuery","getDataByID","enabled","putSocial","putSocialLoading","putData","putSocialSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","split","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_jsx","children","AppLoader","_jsxs","name","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Item","label","rules","required","Input","addonBefore","Button","htmlType","width","marginTop"],"sourceRoot":""}